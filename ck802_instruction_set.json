{
    "ADDC16": {
        "format": "16-bit",
        "opcode": "011000XXXXXXXX01",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                10,
                14
            ]
        },
        "description": "RZ = RZ + RX + C, C = Carry"
    },
    "ADDC32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00000000010XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX + RY + C, C = Carry"
    },
    "ADDI16": {
        "format": "16-bit",
        "opcode": "00100XXXXXXXXXXX",
        "fields": {
            "RZ": [
                8,
                10
            ],
            "IMM8": [
                0,
                7
            ]
        },
        "description": "RZ = RZ + zero_extend(OIMM8)"
    },
    "ADDI16_2": {
        "format": "16-bit",
        "opcode": "01011XXXXXXXXX10",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM3": [
                2,
                4
            ]
        },
        "description": "RZ = RX + zero_extend(OIMM3)"
    },
    "ADDI32_1": {
        "format": "32-bit",
        "opcode": "111001XXXXXXXXXX0000XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM12": [
                0,
                11
            ]
        },
        "description": "RZ = RX + zero_extend(OIMM12)"
    },
    "ADDI32_2": {
        "format": "32-bit",
        "opcode": "110011XXXXX111XXXXXXXXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "IMM18": [
                0,
                17
            ]
        },
        "description": "RZ = RZ + zero_extend(OIMM18)"
    },
    "ADDI_SP": {
        "format": "16-bit",
        "opcode": "00011XXXXXXXXXXX",
        "fields": {
            "RZ": [
                8,
                10
            ],
            "IMM8": [
                0,
                7
            ]
        },
        "description": "RZ = SP + zero_extend(IMM8 << 2)"
    },
    "ADDI_SP_2": {
        "format": "16-bit",
        "opcode": "000101XX000XXXXX",
        "fields": {
            "IMM2": [
                8,
                9
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "SP = SP + zero_extend((IMM2,IMM5) << 2)"
    },
    "ADDU16": {
        "format": "16-bit",
        "opcode": "011000XXXXXXXX00",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ + RX"
    },
    "ADDU16_2": {
        "format": "16-bit",
        "opcode": "01011XXXXXXXXX00",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "RY": [
                2,
                4
            ]
        },
        "description": "RZ = RX + RY"
    },
    "ADDU32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00000000001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX + RY"
    },
    "AND16": {
        "format": "16-bit",
        "opcode": "011010XXXXXXXX00",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ & RX"
    },
    "AND32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00100000001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX & RY"
    },
    "ANDI": {
        "format": "32-bit",
        "opcode": "111001XXXXXXXXXX0010XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM12": [
                0,
                11
            ]
        },
        "description": "RZ = RX & zero_extend(IMM12)"
    },
    "ANDN16": {
        "format": "16-bit",
        "opcode": "011010XXXXXXXX01",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ & (~RX)"
    },
    "ANDN32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00100000010XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX & (~RY)"
    },
    "ANDNI": {
        "format": "32-bit",
        "opcode": "111001XXXXXXXXXX0011XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM12": [
                0,
                11
            ]
        },
        "description": "RZ = RX & (~zero_extend(IMM12))"
    },
    "ASR16": {
        "format": "16-bit",
        "opcode": "011100XXXXXXXX10",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ >>> RX[5:0]"
    },
    "ASR32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01000000100XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX >>> RY[5:0]"
    },
    "ASRC": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001100100XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX >>> OIMM5; C = RX[OIMM5 - 1]"
    },
    "ASRI16": {
        "format": "16-bit",
        "opcode": "01010XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = RX >>> IMM5"
    },
    "ASRI32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001000100XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX >>> IMM5"
    },
    "BCLRI16": {
        "format": "16-bit",
        "opcode": "00111XXX100XXXXX",
        "fields": {
            "RZ": [
                8,
                10
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Clear bit IMM5 in RZ"
    },
    "BCLRI32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00101000001XXXXX",
        "fields": {
            "RX": [
                6,
                10
            ],
            "IMM5": [
                11,
                15
            ],
            "RZ": [
                26,
                30
            ]
        },
        "description": "Clear bit IMM5 in RZ"
    },
    "BF16": {
        "format": "16-bit",
        "opcode": "000011XXXXXXXXXX",
        "fields": {
            "OFFSET": [
                0,
                9
            ]
        },
        "description": "Branch if C == 0 to label OFFSET"
    },
    "BF32": {
        "format": "32-bit",
        "opcode": "1110100001000000XXXXXXXXXXXXXXXX",
        "fields": {
            "OFFSET": [
                0,
                15
            ]
        },
        "description": "Branch if C == 0 to label OFFSET"
    },
    "BKPT": {
        "format": "16-bit",
        "opcode": "0000000000000000",
        "fields": {},
        "description": "Trigger a breakpoint exception or enter debug mode"
    },
    "BMASKI": {
        "format": "32-bit",
        "opcode": "110001XXXXX0000001010000001XXXXX",
        "fields": {
            "IMM": [
                21,
                25
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = 2^OIMM5 - 1"
    },
    "BMCLR32": {
        "format": "32-bit",
        "opcode": "11000000000000000001010000100000",
        "fields": {},
        "description": "Clear BM bit in PSR to 0"
    },
    "BPOP.H": {
        "format": "16-bit",
        "opcode": "00010100101XXX00",
        "fields": {
            "RZ": [
                2,
                4
            ]
        },
        "description": "Pop halfword from binary stack to RZ; update BSP"
    },
    "BPOP.W": {
        "format": "16-bit",
        "opcode": "00010100101XXX10",
        "fields": {
            "RZ": [
                2,
                4
            ]
        },
        "description": "Pop word from binary stack to RZ; update BSP"
    },
    "BPUSH.H": {
        "format": "16-bit",
        "opcode": "00010100111XXX00",
        "fields": {
            "RZ": [
                2,
                4
            ]
        },
        "description": "Push lower halfword of RZ to binary stack; update BSP"
    },
    "BPUSH.W": {
        "format": "16-bit",
        "opcode": "00010100111XXX10",
        "fields": {
            "RZ": [
                2,
                4
            ]
        },
        "description": "Push word of RZ to binary stack; update BSP"
    },
    "BMSET": {
        "format": "32-bit",
        "opcode": "11000000000000000001000000100000",
        "fields": {},
        "description": "Set BM bit in PSR to 1"
    },
    "BR16": {
        "format": "16-bit",
        "opcode": "000001",
        "fields": {
            "OFFSET": [
                6,
                16
            ]
        },
        "description": "Unconditional branch to label OFFSET"
    },
    "BR32": {
        "format": "32-bit",
        "opcode": "111011",
        "fields": {
            "OFFSET": [
                6,
                26
            ]
        },
        "description": "Unconditional branch to label OFFSET"
    },
    "BSETI16": {
        "format": "16-bit",
        "opcode": "00111XXX101XXXXX",
        "fields": {
            "RZ": [
                8,
                10
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = RZ[IMM5]置位"
    },
    "BSETI32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00101000010XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RZ[IMM5]置位"
    },
    "BSR": {
        "format": "32-bit",
        "opcode": "111000XXXXXXXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "OFFSET": [
                0,
                25
            ]
        },
        "description": "Jump to sub program at label OFFSET"
    },
    "BT16": {
        "format": "16-bit",
        "opcode": "000010XXXXXXXXXX",
        "fields": {
            "OFFSET": [
                0,
                9
            ]
        },
        "description": "Branch if C == 1"
    },
    "BT32": {
        "format": "32-bit",
        "opcode": "1110100001100000XXXXXXXXXXXXXXXX",
        "fields": {
            "OFFSET": [
                0,
                15
            ]
        },
        "description": "Branch if C == 1"
    },
    "BTSTI": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX0010100010000000",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ]
        },
        "description": "Test and branch if RX[IMM5] == 1"
    },
    "CMPHS": {
        "format": "16-bit",
        "opcode": "011001XXXXXXXX00",
        "fields": {
            "RY": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Set flags based on RX >= RY (unsigned comparison)"
    },
    "CMPHSI16": {
        "format": "16-bit",
        "opcode": "00111XXX000XXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Set flags based on RX >= zero_extend(OIMM5) (unsigned comparison)"
    },
    "CMPHSI": {
        "format": "32-bit",
        "opcode": "11101011000XXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RX": [
                21,
                25
            ],
            "IMM16": [
                0,
                15
            ]
        },
        "description": "Set flags based on RX >= zero_extend(OIMM16) (unsigned comparison)"
    },
    "CMPLT": {
        "format": "16-bit",
        "opcode": "011001XXXXXXXX01",
        "fields": {
            "RX": [
                6,
                9
            ],
            "RY": [
                2,
                5
            ]
        },
        "description": "Set flags based on RX < RY (unsigned comparison)"
    },
    "CMPLTI16": {
        "format": "16-bit",
        "opcode": "00111XXX001XXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Set flags based on RX < zero_extend(OIMM5) (unsigned comparison)"
    },
    "CMPLTI32": {
        "format": "32-bit",
        "opcode": "11101011001XXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RX": [
                16,
                20
            ],
            "IMM16": [
                0,
                15
            ]
        },
        "description": "Set flags based on RX < zero_extend(OIMM16) (unsigned comparison)"
    },
    "CMPNE": {
        "format": "16-bit",
        "opcode": "011001XXXXXXXX10",
        "fields": {
            "RX": [
                6,
                9
            ],
            "RY": [
                2,
                5
            ]
        },
        "description": "Set flags based on RX != RY"
    },
    "CMPNEI16": {
        "format": "16-bit",
        "opcode": "00111XXX010XXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Set flags based on RX != zero_extend(IMM5)"
    },
    "CMPNEI32": {
        "format": "32-bit",
        "opcode": "11101011010XXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RX": [
                21,
                25
            ],
            "IMM16": [
                0,
                15
            ]
        },
        "description": "Set flags based on RX != zero_extend(IMM16)"
    },
    "DECF": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00001100100XXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = RX - zero_extend(IMM5) when C == 0"
    },
    "DECT": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00001101000XXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = RX - zero_extend(IMM5) when C == 1"
    },
    "DOZE": {
        "format": "32-bit",
        "opcode": "1100000000000000101000000100000",
        "fields": {},
        "description": "Enter low-power mode"
    },
    "FF0": {
        "format": "32-bit",
        "opcode": "11000100000XXXXX01111100001XXXXX",
        "fields": {
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Find first zero in RZ and set to result to RX"
    },
    "FF1": {
        "format": "32-bit",
        "opcode": "11000100000XXXXX01111100010XXXXX",
        "fields": {
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Find first one in RZ and set to result to RX"
    },
    "INCF": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00001100001XXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = RZ + zero_extend(IMM5) when C == 0"
    },
    "INCT": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00001100010XXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = RZ + zero_extend(IMM5) when C == 1"
    },
    "IPUSH": {
        "format": "16-bit",
        "opcode": "0001010001100010",
        "fields": {},
        "description": "Push R0~R3, R12, R13 onto interrupt stack"
    },
    "IPOP": {
        "format": "16-bit",
        "opcode": "0001010001100011",
        "fields": {
            "RZ": [
                21,
                25
            ]
        },
        "description": "Pop value from interrupt stack into R0~R3,R12,R13"
    },
    "IXH": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00001000001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX + (RY << 1)"
    },
    "IXW": {
        "format": "32-bit",
        "opcode": "111001XXXXXXXXXX00001000010XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                0,
                4
            ]
        },
        "description": "RZ = RX + (RY << 2)"
    },
    "JMP": {
        "format": "16-bit",
        "opcode": "0111100000XXXX00",
        "fields": {
            "RX": [
                2,
                5
            ]
        },
        "description": "Unconditional jump to address in RX"
    },
    "JMPIX": {
        "format": "16-bit",
        "opcode": "00111XXX111000XX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "IMM2": [
                0,
                1
            ]
        },
        "description": "Unconditional jump to address at SVBR + (RX & 0xff) * IMM"
    },
    "JSR": {
        "format": "16-bit",
        "opcode": "011110000XXX01",
        "fields": {
            "RX": [
                2,
                5
            ]
        },
        "description": "Jump to subroutine to address in RX"
    },
    "LD.B16": {
        "format": "16-bit",
        "opcode": "10000XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "OFFSET": [
                0,
                4
            ]
        },
        "description": "RZ = zero_extend(MEM[RX + zero_extend(OFFSET)])"
    },
    "LD.B32": {
        "format": "32-bit",
        "opcode": "110110XXXXXXXXXX0000XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "RZ = zero_extend(MEM[RX + zero_extend(OFFSET)])"
    },
    "LD.BS": {
        "format": "32-bit",
        "opcode": "110110XXXXXXXXXX0100XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "RZ = signed_extend(MEM[RX + zero_extend(OFFSET)])"
    },
    "LD.H16": {
        "format": "16-bit",
        "opcode": "10001XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "OFFSET": [
                0,
                4
            ]
        },
        "description": "RZ = zero_extend(MEM[RX + zero_extend(OFFSET<<1)])"
    },
    "LD.H32": {
        "format": "32-bit",
        "opcode": "110110XXXXXXXXXX0001XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "RZ = zero_extend(MEM[RX + zero_extend(OFFSET<<1)])"
    },
    "LD.HS": {
        "format": "32-bit",
        "opcode": "110110XXXXXXXXXX0101XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "RZ = signed_extend(MEM[RX + zero_extend(OFFSET<<1)])"
    },
    "LD.W16": {
        "format": "16-bit",
        "opcode": "10010XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = MEM[RX + sign_extend(offset << 2)]"
    },
    "LD.W32": {
        "format": "32-bit",
        "opcode": "110110XXXXXXXXXX0010XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "RZ = MEM[RX + zero_extend(offset << 2)]"
    },
    "LDM": {
        "format": "32-bit",
        "opcode": "110100XXXXXXXXXX00011100001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM5": [
                0,
                15
            ]
        },
        "description": "Load multiple registers starting at ADDR"
    },
    "LRW16": {
        "format": "16-bit",
        "opcode": "000X00XXXXXXXXXX",
        "fields": {
            "IMM": [
                12,
                12
            ],
            "IMM2": [
                8,
                9
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "RZ = zero_extend(MEM[(PC + zero_extend(OFFSET << 2)) &0xfffffffc])"
    },
    "LRW32": {
        "format": "32-bit",
        "opcode": "11101010100XXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RZ": [
                16,
                20
            ],
            "OFFSET": [
                0,
                15
            ]
        },
        "description": "RZ = zero_extend(MEM[(PC + zero_extend(OFFSET << 2)) &0xfffffffc])"
    },
    "LSL16": {
        "format": "16-bit",
        "opcode": "011100XXXXXXXX00",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ << RX[5:0]"
    },
    "LSL32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01000000001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX << RY[5:0]"
    },
    "LSLC": {
        "format": "32-bit",
        "opcode": "110011XXXXXXXXXX0011XXXXXXXXXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Logical shift left RZ by RX[4:0] with carry, RZ = RX << OIMM5"
    },
    "LSLI16": {
        "format": "16-bit",
        "opcode": "01000XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Logical shift left RZ by immediate value, RZ = RX << IMM5"
    },
    "LSLI32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001000001XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Logical shift left RZ by immediate value, RZ = RX << IMM5"
    },
    "LSR16": {
        "format": "16-bit",
        "opcode": "011100XXXXXXXX01",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Logical shift right RZ by RX[4:0], RZ = RZ >> RX[5:0]"
    },
    "LSR32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01000000010XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Logical shift right RZ by RX[4:0], RZ = RX >> RY[5:0]"
    },
    "LSRC": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001100010XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Logical shift right RZ by RX[4:0] with carry, RZ = RX >> OIMM5; C = RX[OIMM5 - 1]"
    },
    "LSRI16": {
        "format": "16-bit",
        "opcode": "01001XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Logical shift right RZ by immediate value, RZ = RX >> IMM5"
    },
    "LSRI32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001000010XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Logical shift right RZ by immediate value, RZ = RX >> IMM5"
    },
    "MFCR": {
        "format": "32-bit",
        "opcode": "110000XXXXXXXXXX01100000001XXXXX",
        "fields": {
            "SEL": [
                21,
                25
            ],
            "CRX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Move value from control register <CRX, SEL> to RZ"
    },
    "MOV": {
        "format": "16-bit",
        "opcode": "011011XXXXXXXX11",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Move value from RX to RZ"
    },
    "MOVF": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX0000110000100000",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ]
        },
        "description": "Move value from RX to RZ if C == 0"
    },
    "MOVI16": {
        "format": "16-bit",
        "opcode": "00110XXXXXXXXXXX",
        "fields": {
            "RZ": [
                8,
                10
            ],
            "IMM8": [
                0,
                7
            ]
        },
        "description": "Move immediate value IMM8 into RZ, RZ = zero_extend(IMM8)"
    },
    "MOVI32": {
        "format": "32-bit",
        "opcode": "11101010000XXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RZ": [
                16,
                20
            ],
            "IMM16": [
                0,
                15
            ]
        },
        "description": "Move immediate value IMM16 into RZ, RZ = zero_extend(IMM16)"
    },
    "MOVIH": {
        "format": "32-bit",
        "opcode": "11101010001XXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RZ": [
                16,
                20
            ],
            "IMM16": [
                0,
                15
            ]
        },
        "description": "Move high immediate value IMM16 into RZ, RZ = zero_extend(IMM16) << 16"
    },
    "MOVT": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX0000110001000000",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ]
        },
        "description": "Move RX into RZ if C == 1"
    },
    "MTCR": {
        "format": "32-bit",
        "opcode": "110000XXXXXXXXXX01100100001XXXXX",
        "fields": {
            "SEL": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "CRZ": [
                0,
                4
            ]
        },
        "description": "Move value from RZ to control register CR, CR<Z, SEL> = RX"
    },
    "MULT16": {
        "format": "16-bit",
        "opcode": "011111XXXXXXXX00",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Multiply RX by RZ, store result in RZ"
    },
    "MULT32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX10000100001XXXXX",
        "fields": {
            "RY": [
                16,
                20
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Multiply RX by RY, store result in RZ, RZ = RX x RY"
    },
    "MVC": {
        "format": "32-bit",
        "opcode": "110001000000000000000101000XXXXX",
        "fields": {
            "RZ": [
                0,
                4
            ]
        },
        "description": "Move value from C to RZ"
    },
    "MVCV": {
        "format": "16-bit",
        "opcode": "011001XXXX000011",
        "fields": {
            "RZ": [
                6,
                9
            ]
        },
        "description": "Move value from !C to RZ, RZ = !C"
    },
    "NIE": {
        "format": "16-bit",
        "opcode": "0001010001100000",
        "fields": {},
        "description": "Save EPSR, EPC to stack, enable PSR.IE, PSR.EE"
    },
    "NIR": {
        "format": "16-bit",
        "opcode": "0001010001100001",
        "fields": {},
        "description": "Pop EPSR, EPC from stack, clear PSR.IE, PSR.EE"
    },
    "NOR": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00100100100XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = ~(RX | RY)"
    },
    "OR": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00100100001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX | RY"
    },
    "ORI": {
        "format": "32-bit",
        "opcode": "111011XXXXXXXXXXXXXXXXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM16": [
                0,
                15
            ]
        },
        "description": "RZ = RX | zero_extend(IMM16)"
    },
    "POP": {
        "format": "16-bit",
        "opcode": "00010100100XXXXX",
        "fields": {
            "R15": [
                4,
                4
            ],
            "LIST1": [
                0,
                3
            ]
        },
        "description": "Pop value from stack into R15 and LIST1"
    },
    "PSRCLR": {
        "format": "32-bit",
        "opcode": "110000XXXXX000000111000000100000",
        "fields": {
            "IMM5": [
                21,
                25
            ]
        },
        "description": "Clear PSR bits in IMM5"
    },
    "PSRSET": {
        "format": "32-bit",
        "opcode": "110000XXXXX000000111010000100000",
        "fields": {
            "IMM5": [
                21,
                25
            ]
        },
        "description": "Set PSR bits in IMM5"
    },
    "PUSH": {
        "format": "16-bit",
        "opcode": "00010100110XXXXX",
        "fields": {
            "R15": [
                4,
                4
            ],
            "LIST1": [
                0,
                3
            ]
        },
        "description": "Push R15/LIST1 onto stack"
    },
    "REVB": {
        "format": "16-bit",
        "opcode": "011110XXXXXXXX10",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ[31:24] = RX[7:0], RZ[23:16] = RX[15:8], RZ[15:8] = RX[23:16], RZ[7:0] = RX[31:24]"
    },
    "REVH": {
        "format": "16-bit",
        "opcode": "011110XXXXXXXX11",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ[31:24] = RX[23:16], RZ[23:16] = RX[31:24], RZ[15:8] = RX[7:0], RZ[7:0] = RX[15:8]"
    },
    "ROTL16": {
        "format": "16-bit",
        "opcode": "011100XXXXXXXX11",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Rotate left RZ by RX[4:0], RZ = RZ <<<< RX[5:0]"
    },
    "ROTL32": {
        "format": "16-bit",
        "opcode": "110001XXXXXXXXXX01000001000XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Rotate left RZ by RX[4:0], RZ = RZ <<<< RX[5:0]"
    },
    "ROTLI": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001001000XXXXX",
        "fields": {
            "IMM5": [
                0,
                4
            ],
            "RZ": [
                16,
                20
            ]
        },
        "description": "Rotate left RZ by immediate value"
    },
    "RTE": {
        "format": "32-bit",
        "opcode": "11000000000000000100000000100000",
        "fields": {},
        "description": "Return from exception"
    },
    "ST.B16": {
        "format": "16-bit",
        "opcode": "10100XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Store byte from RZ to MEM[RX + zero_extend(OFFSET)], MEM[RX + zero_extend(offset)] = RZ[7:0]"
    },
    "ST.B32": {
        "format": "32-bit",
        "opcode": "110111XXXXXXXXXX0000XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "Store byte from RZ to MEM[RX + zero_extend(OFFSET)], MEM[RX + zero_extend(offset)] = RZ[7:0]"
    },
    "ST.H16": {
        "format": "16-bit",
        "opcode": "10101XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Store byte from RZ to MEM[RX + zero_extend(OFFSET)], MEM[RX + zero_extend(offset)] = RZ[15:0]"
    },
    "ST.H32": {
        "format": "32-bit",
        "opcode": "110111XXXXXXXXXX0001XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "Store byte from RZ to MEM[RX + zero_extend(OFFSET)], MEM[RX + zero_extend(offset)] = RZ[15:0]"
    },
    "ST.W16": {
        "format": "16-bit",
        "opcode": "10110XXXXXXXXXXX",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Store byte from RZ to MEM[RX + zero_extend(OFFSET << 2)], MEM[RX + zero_extend(offset)] = RZ[31:0]"
    },
    "ST.W32": {
        "format": "32-bit",
        "opcode": "110111XXXXXXXXXX0010XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "OFFSET": [
                0,
                11
            ]
        },
        "description": "Store byte from RZ to MEM[RX + zero_extend(OFFSET)], MEM[RX + zero_extend(offset << 2)] = RZ[31:0]"
    },
    "STM": {
        "format": "32-bit",
        "opcode": "110111XXXXXXXXXX00011100001XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "Store multiple registers (IMM5) starting from RZ to MEM[RX]"
    },
    "STOP": {
        "format": "32-bit",
        "opcode": "11000000000000000100100000100000",
        "fields": {},
        "description": "Stop processor execution"
    },
    "SUBC16": {
        "format": "16-bit",
        "opcode": "011000XXXXXXXX11",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ - RX - !C, with carry"
    },
    "SUBC32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00000001000XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX - RY - !C, with carry"
    },
    "SUBI": {
        "format": "32-bit",
        "opcode": "111001XXXXXXXXXX0001XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM12": [
                0,
                11
            ]
        },
        "description": "RZ = RZ - zero_extend(OIMM12)"
    },
    "SUBI(SP)": {
        "format": "16-bit",
        "opcode": "000101XX001XXXXX",
        "fields": {
            "IMM2": [
                8,
                9
            ],
            "IMM5": [
                0,
                4
            ]
        },
        "description": "SP = SP - zero_extend({IMM2, IMM5} << 2)"
    },
    "SUBU16": {
        "format": "16-bit",
        "opcode": "011000XXXXXXXX10",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ - RX"
    },
    "SUBU16_2": {
        "format": "16-bit",
        "opcode": "01011XXXXXXXXX01",
        "fields": {
            "RX": [
                8,
                10
            ],
            "RZ": [
                5,
                7
            ],
            "RY": [
                2,
                4
            ]
        },
        "description": "RZ = RX - RY"
    },
    "SUBU32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00000000100XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX - RY"
    },
    "SYNC": {
        "format": "32-bit",
        "opcode": "11000000000000000000010000100000",
        "fields": {},
        "description": "Synchronize memory"
    },
    "TRAP": {
        "format": "32-bit",
        "opcode": "11000000000000000010XX0000100000",
        "fields": {
            "NO": [
                10,
                11
            ]
        },
        "description": "Trigger a software interrupt"
    },
    "TST": {
        "format": "16-bit",
        "opcode": "011010XXXXXXXX10",
        "fields": {
            "RX": [
                2,
                5
            ],
            "RY": [
                6,
                9
            ]
        },
        "description": "Set flags based on RX & RY, C = ((RX & RY) != 0)"
    },
    "TSTNBZ": {
        "format": "16-bit",
        "opcode": "0110100000XXXX11",
        "fields": {
            "RX": [
                2,
                5
            ]
        },
        "description": "Test RX, set flags if result is not zero, C = (RX == 0)"
    },
    "WAIT": {
        "format": "32-bit",
        "opcode": "11000000000000000100110000100000",
        "fields": {},
        "description": "Wait for interrupt"
    },
    "XOR16": {
        "format": "16-bit",
        "opcode": "011011XXXXXXXX01",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "RZ = RZ ^ RX"
    },
    "XOR32": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX00100100010XXXXX",
        "fields": {
            "RY": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "RZ = RX ^ RY"
    },
    "XORI": {
        "format": "32-bit",
        "opcode": "111001XXXXXXXXXX0100XXXXXXXXXXXX",
        "fields": {
            "RZ": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "IMM12": [
                0,
                11
            ]
        },
        "description": "RZ = RX ^ zero_extend(IMM12)"
    },
    "XSR": {
        "format": "32-bit",
        "opcode": "110001XXXXXXXXXX01001101000XXXXX",
        "fields": {
            "IMM5": [
                21,
                25
            ],
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "{RZ, C} = {RX, C} >>> OIMM5"
    },
    "XTRB0": {
        "format": "32-bit",
        "opcode": "11000100000XXXXX01110000001XXXXX",
        "fields": {
            "RX": [
                21,
                25
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Extract byte 0 from RX into RZ, RZ = zero_extend(RX[31:24]), C = RZ != 0"
    },
    "XTRB1": {
        "format": "32-bit",
        "opcode": "11000100000XXXXX01110000010XXXXX",
        "fields": {
            "RX": [
                16,
                20
            ],
            "RZ": [
                0,
                4
            ]
        },
        "description": "Extract byte 1 from RX into RZ, RZ = zero_extend(RX[23:16]), C = RZ != 0"
    },
    "XTRB2": {
        "format": "32-bit",
        "opcode": "11000100000XXXXX01110000100XXXXX",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Extract byte 2 from RX into RZ, RZ = zero_extend(RX[15:8]), C = RZ != 0"
    },
    "XTRB3": {
        "format": "32-bit",
        "opcode": "11000100000XXXXX01110001000XXXXX",
        "fields": {
            "RZ": [
                6,
                9
            ],
            "RX": [
                2,
                5
            ]
        },
        "description": "Extract byte 3 from RX into RZ, RZ = zero_extend(RX[7:0]), C = RZ != 0"
    }
}